// @generated by protobuf-ts 2.9.0 with parameter output_javascript
// @generated from protobuf file "pbf/host/create.proto" (package "host", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * CreateI is the input for creating hosts.
 *
 *     {
 *         "object": [
 *             {
 *                 "public": {
 *                     "disc": "https://discord.gg/Flashbots",
 *                     "name": "Flashbots",
 *                     "twit": "https://twitter.com/Flashbots",
 *                     "user": "551265"
 *                 }
 *             }
 *         ]
 *     }
 *
 *
 * @generated from protobuf message host.CreateI
 */
export interface CreateI {
  /**
   * @generated from protobuf field: host.CreateI_Filter filter = 1;
   */
  filter?: CreateI_Filter;
  /**
   * @generated from protobuf field: repeated host.CreateI_Object object = 2;
   */
  object: CreateI_Object[];
}
/**
 * @generated from protobuf message host.CreateI_Filter
 */
export interface CreateI_Filter {}
/**
 * @generated from protobuf message host.CreateI_Object
 */
export interface CreateI_Object {
  /**
   * @generated from protobuf field: map<string, string> intern = 1;
   */
  intern: {
    [key: string]: string;
  };
  /**
   * @generated from protobuf field: host.CreateI_Object_Public public = 2;
   */
  public?: CreateI_Object_Public;
}
/**
 * @generated from protobuf message host.CreateI_Object_Public
 */
export interface CreateI_Object_Public {
  /**
   * disc is the host's Discord link.
   *
   * @generated from protobuf field: string disc = 1;
   */
  disc: string;
  /**
   * name is the host name.
   *
   * @generated from protobuf field: string name = 2;
   */
  name: string;
  /**
   * twit is the host's Twitter link.
   *
   * @generated from protobuf field: string twit = 3;
   */
  twit: string;
  /**
   * user is the user ID creating this host.
   *
   * @generated from protobuf field: string user = 4;
   */
  user: string;
}
/**
 * CreateO is the output for creating hosts.
 *
 *     {
 *         "object": [
 *             {
 *                 "intern": {
 *                     "host.naonao.online/id": "<id>",
 *                     "host.naonao.online/created": "<unix>"
 *                 }
 *             }
 *         ]
 *     }
 *
 *
 * @generated from protobuf message host.CreateO
 */
export interface CreateO {
  /**
   * @generated from protobuf field: host.CreateO_Filter filter = 1;
   */
  filter?: CreateO_Filter;
  /**
   * @generated from protobuf field: repeated host.CreateO_Object object = 2;
   */
  object: CreateO_Object[];
}
/**
 * @generated from protobuf message host.CreateO_Filter
 */
export interface CreateO_Filter {}
/**
 * @generated from protobuf message host.CreateO_Object
 */
export interface CreateO_Object {
  /**
   * @generated from protobuf field: map<string, string> intern = 1;
   */
  intern: {
    [key: string]: string;
  };
  /**
   * @generated from protobuf field: host.CreateO_Object_Public public = 2;
   */
  public?: CreateO_Object_Public;
}
/**
 * @generated from protobuf message host.CreateO_Object_Public
 */
export interface CreateO_Object_Public {}
declare class CreateI$Type extends MessageType<CreateI> {
  constructor();
  create(value?: PartialMessage<CreateI>): CreateI;
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CreateI,
  ): CreateI;
  internalBinaryWrite(
    message: CreateI,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message host.CreateI
 */
export declare const CreateI: CreateI$Type;
declare class CreateI_Filter$Type extends MessageType<CreateI_Filter> {
  constructor();
  create(value?: PartialMessage<CreateI_Filter>): CreateI_Filter;
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CreateI_Filter,
  ): CreateI_Filter;
  internalBinaryWrite(
    message: CreateI_Filter,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message host.CreateI_Filter
 */
export declare const CreateI_Filter: CreateI_Filter$Type;
declare class CreateI_Object$Type extends MessageType<CreateI_Object> {
  constructor();
  create(value?: PartialMessage<CreateI_Object>): CreateI_Object;
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CreateI_Object,
  ): CreateI_Object;
  private binaryReadMap1;
  internalBinaryWrite(
    message: CreateI_Object,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message host.CreateI_Object
 */
export declare const CreateI_Object: CreateI_Object$Type;
declare class CreateI_Object_Public$Type extends MessageType<CreateI_Object_Public> {
  constructor();
  create(value?: PartialMessage<CreateI_Object_Public>): CreateI_Object_Public;
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CreateI_Object_Public,
  ): CreateI_Object_Public;
  internalBinaryWrite(
    message: CreateI_Object_Public,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message host.CreateI_Object_Public
 */
export declare const CreateI_Object_Public: CreateI_Object_Public$Type;
declare class CreateO$Type extends MessageType<CreateO> {
  constructor();
  create(value?: PartialMessage<CreateO>): CreateO;
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CreateO,
  ): CreateO;
  internalBinaryWrite(
    message: CreateO,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message host.CreateO
 */
export declare const CreateO: CreateO$Type;
declare class CreateO_Filter$Type extends MessageType<CreateO_Filter> {
  constructor();
  create(value?: PartialMessage<CreateO_Filter>): CreateO_Filter;
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CreateO_Filter,
  ): CreateO_Filter;
  internalBinaryWrite(
    message: CreateO_Filter,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message host.CreateO_Filter
 */
export declare const CreateO_Filter: CreateO_Filter$Type;
declare class CreateO_Object$Type extends MessageType<CreateO_Object> {
  constructor();
  create(value?: PartialMessage<CreateO_Object>): CreateO_Object;
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CreateO_Object,
  ): CreateO_Object;
  private binaryReadMap1;
  internalBinaryWrite(
    message: CreateO_Object,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message host.CreateO_Object
 */
export declare const CreateO_Object: CreateO_Object$Type;
declare class CreateO_Object_Public$Type extends MessageType<CreateO_Object_Public> {
  constructor();
  create(value?: PartialMessage<CreateO_Object_Public>): CreateO_Object_Public;
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CreateO_Object_Public,
  ): CreateO_Object_Public;
  internalBinaryWrite(
    message: CreateO_Object_Public,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message host.CreateO_Object_Public
 */
export declare const CreateO_Object_Public: CreateO_Object_Public$Type;
export {};
