// @generated by protobuf-ts 2.9.1 with parameter output_javascript
// @generated from protobuf file "pbf/wallet/update.proto" (package "wallet", syntax proto3)
// tslint:disable
import { WireType } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
// @generated message type with reflection information, may provide speed optimized methods
class UpdateI$Type extends MessageType {
    constructor() {
        super("wallet.UpdateI", [
            { no: 100, name: "filter", kind: "message", T: () => UpdateI_Filter },
            { no: 200, name: "object", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => UpdateI_Object }
        ]);
    }
    create(value) {
        const message = { object: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* wallet.UpdateI_Filter filter */ 100:
                    message.filter = UpdateI_Filter.internalBinaryRead(reader, reader.uint32(), options, message.filter);
                    break;
                case /* repeated wallet.UpdateI_Object object */ 200:
                    message.object.push(UpdateI_Object.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* wallet.UpdateI_Filter filter = 100; */
        if (message.filter)
            UpdateI_Filter.internalBinaryWrite(message.filter, writer.tag(100, WireType.LengthDelimited).fork(), options).join();
        /* repeated wallet.UpdateI_Object object = 200; */
        for (let i = 0; i < message.object.length; i++)
            UpdateI_Object.internalBinaryWrite(message.object[i], writer.tag(200, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message wallet.UpdateI
 */
export const UpdateI = new UpdateI$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateI_Filter$Type extends MessageType {
    constructor() {
        super("wallet.UpdateI_Filter", []);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        return target ?? this.create();
    }
    internalBinaryWrite(message, writer, options) {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message wallet.UpdateI_Filter
 */
export const UpdateI_Filter = new UpdateI_Filter$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateI_Object$Type extends MessageType {
    constructor() {
        super("wallet.UpdateI_Object", [
            { no: 100, name: "intern", kind: "message", T: () => UpdateI_Object_Intern },
            { no: 200, name: "public", kind: "message", T: () => UpdateI_Object_Public },
            { no: 300, name: "symbol", kind: "message", T: () => UpdateI_Object_Symbol },
            { no: 400, name: "update", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => UpdateI_Object_Update }
        ]);
    }
    create(value) {
        const message = { update: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* wallet.UpdateI_Object_Intern intern */ 100:
                    message.intern = UpdateI_Object_Intern.internalBinaryRead(reader, reader.uint32(), options, message.intern);
                    break;
                case /* wallet.UpdateI_Object_Public public */ 200:
                    message.public = UpdateI_Object_Public.internalBinaryRead(reader, reader.uint32(), options, message.public);
                    break;
                case /* wallet.UpdateI_Object_Symbol symbol */ 300:
                    message.symbol = UpdateI_Object_Symbol.internalBinaryRead(reader, reader.uint32(), options, message.symbol);
                    break;
                case /* repeated wallet.UpdateI_Object_Update update */ 400:
                    message.update.push(UpdateI_Object_Update.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* wallet.UpdateI_Object_Intern intern = 100; */
        if (message.intern)
            UpdateI_Object_Intern.internalBinaryWrite(message.intern, writer.tag(100, WireType.LengthDelimited).fork(), options).join();
        /* wallet.UpdateI_Object_Public public = 200; */
        if (message.public)
            UpdateI_Object_Public.internalBinaryWrite(message.public, writer.tag(200, WireType.LengthDelimited).fork(), options).join();
        /* wallet.UpdateI_Object_Symbol symbol = 300; */
        if (message.symbol)
            UpdateI_Object_Symbol.internalBinaryWrite(message.symbol, writer.tag(300, WireType.LengthDelimited).fork(), options).join();
        /* repeated wallet.UpdateI_Object_Update update = 400; */
        for (let i = 0; i < message.update.length; i++)
            UpdateI_Object_Update.internalBinaryWrite(message.update[i], writer.tag(400, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message wallet.UpdateI_Object
 */
export const UpdateI_Object = new UpdateI_Object$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateI_Object_Intern$Type extends MessageType {
    constructor() {
        super("wallet.UpdateI_Object_Intern", [
            { no: 100, name: "wllt", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = { wllt: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string wllt */ 100:
                    message.wllt = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string wllt = 100; */
        if (message.wllt !== "")
            writer.tag(100, WireType.LengthDelimited).string(message.wllt);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message wallet.UpdateI_Object_Intern
 */
export const UpdateI_Object_Intern = new UpdateI_Object_Intern$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateI_Object_Public$Type extends MessageType {
    constructor() {
        super("wallet.UpdateI_Object_Public", [
            { no: 100, name: "mess", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 200, name: "pubk", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 300, name: "sign", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = { mess: "", pubk: "", sign: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string mess */ 100:
                    message.mess = reader.string();
                    break;
                case /* string pubk */ 200:
                    message.pubk = reader.string();
                    break;
                case /* string sign */ 300:
                    message.sign = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string mess = 100; */
        if (message.mess !== "")
            writer.tag(100, WireType.LengthDelimited).string(message.mess);
        /* string pubk = 200; */
        if (message.pubk !== "")
            writer.tag(200, WireType.LengthDelimited).string(message.pubk);
        /* string sign = 300; */
        if (message.sign !== "")
            writer.tag(300, WireType.LengthDelimited).string(message.sign);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message wallet.UpdateI_Object_Public
 */
export const UpdateI_Object_Public = new UpdateI_Object_Public$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateI_Object_Symbol$Type extends MessageType {
    constructor() {
        super("wallet.UpdateI_Object_Symbol", []);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        return target ?? this.create();
    }
    internalBinaryWrite(message, writer, options) {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message wallet.UpdateI_Object_Symbol
 */
export const UpdateI_Object_Symbol = new UpdateI_Object_Symbol$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateI_Object_Update$Type extends MessageType {
    constructor() {
        super("wallet.UpdateI_Object_Update", []);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        return target ?? this.create();
    }
    internalBinaryWrite(message, writer, options) {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message wallet.UpdateI_Object_Update
 */
export const UpdateI_Object_Update = new UpdateI_Object_Update$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateO$Type extends MessageType {
    constructor() {
        super("wallet.UpdateO", [
            { no: 100, name: "filter", kind: "message", T: () => UpdateO_Filter },
            { no: 200, name: "object", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => UpdateO_Object }
        ]);
    }
    create(value) {
        const message = { object: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* wallet.UpdateO_Filter filter */ 100:
                    message.filter = UpdateO_Filter.internalBinaryRead(reader, reader.uint32(), options, message.filter);
                    break;
                case /* repeated wallet.UpdateO_Object object */ 200:
                    message.object.push(UpdateO_Object.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* wallet.UpdateO_Filter filter = 100; */
        if (message.filter)
            UpdateO_Filter.internalBinaryWrite(message.filter, writer.tag(100, WireType.LengthDelimited).fork(), options).join();
        /* repeated wallet.UpdateO_Object object = 200; */
        for (let i = 0; i < message.object.length; i++)
            UpdateO_Object.internalBinaryWrite(message.object[i], writer.tag(200, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message wallet.UpdateO
 */
export const UpdateO = new UpdateO$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateO_Filter$Type extends MessageType {
    constructor() {
        super("wallet.UpdateO_Filter", []);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        return target ?? this.create();
    }
    internalBinaryWrite(message, writer, options) {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message wallet.UpdateO_Filter
 */
export const UpdateO_Filter = new UpdateO_Filter$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateO_Object$Type extends MessageType {
    constructor() {
        super("wallet.UpdateO_Object", [
            { no: 100, name: "intern", kind: "message", T: () => UpdateO_Object_Intern },
            { no: 200, name: "public", kind: "message", T: () => UpdateO_Object_Public }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* wallet.UpdateO_Object_Intern intern */ 100:
                    message.intern = UpdateO_Object_Intern.internalBinaryRead(reader, reader.uint32(), options, message.intern);
                    break;
                case /* wallet.UpdateO_Object_Public public */ 200:
                    message.public = UpdateO_Object_Public.internalBinaryRead(reader, reader.uint32(), options, message.public);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* wallet.UpdateO_Object_Intern intern = 100; */
        if (message.intern)
            UpdateO_Object_Intern.internalBinaryWrite(message.intern, writer.tag(100, WireType.LengthDelimited).fork(), options).join();
        /* wallet.UpdateO_Object_Public public = 200; */
        if (message.public)
            UpdateO_Object_Public.internalBinaryWrite(message.public, writer.tag(200, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message wallet.UpdateO_Object
 */
export const UpdateO_Object = new UpdateO_Object$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateO_Object_Intern$Type extends MessageType {
    constructor() {
        super("wallet.UpdateO_Object_Intern", [
            { no: 100, name: "addr", kind: "message", T: () => UpdateO_Object_Intern_Addr },
            { no: 200, name: "stts", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = { stts: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* wallet.UpdateO_Object_Intern_Addr addr */ 100:
                    message.addr = UpdateO_Object_Intern_Addr.internalBinaryRead(reader, reader.uint32(), options, message.addr);
                    break;
                case /* string stts */ 200:
                    message.stts = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* wallet.UpdateO_Object_Intern_Addr addr = 100; */
        if (message.addr)
            UpdateO_Object_Intern_Addr.internalBinaryWrite(message.addr, writer.tag(100, WireType.LengthDelimited).fork(), options).join();
        /* string stts = 200; */
        if (message.stts !== "")
            writer.tag(200, WireType.LengthDelimited).string(message.stts);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message wallet.UpdateO_Object_Intern
 */
export const UpdateO_Object_Intern = new UpdateO_Object_Intern$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateO_Object_Intern_Addr$Type extends MessageType {
    constructor() {
        super("wallet.UpdateO_Object_Intern_Addr", [
            { no: 100, name: "time", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = { time: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string time */ 100:
                    message.time = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string time = 100; */
        if (message.time !== "")
            writer.tag(100, WireType.LengthDelimited).string(message.time);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message wallet.UpdateO_Object_Intern_Addr
 */
export const UpdateO_Object_Intern_Addr = new UpdateO_Object_Intern_Addr$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateO_Object_Public$Type extends MessageType {
    constructor() {
        super("wallet.UpdateO_Object_Public", []);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        return target ?? this.create();
    }
    internalBinaryWrite(message, writer, options) {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message wallet.UpdateO_Object_Public
 */
export const UpdateO_Object_Public = new UpdateO_Object_Public$Type();
