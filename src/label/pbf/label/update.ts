// @generated by protobuf-ts 2.9.0
// @generated from protobuf file "pbf/label/update.proto" (package "label", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * UpdateI is the input for updating labels.
 *
 *     {
 *         "object": [
 *             {
 *                 "intern": {
 *                     "label.naonao.online/id": "<id>"
 *                 }
 *                 "update": [
 *                     {
 *                         "ope": "replace",
 *                         "pat": "/obj/property/name",
 *                         "val": "crypto"
 *                     }
 *                 ]
 *             }
 *         ]
 *     }
 *
 *
 * @generated from protobuf message label.UpdateI
 */
export interface UpdateI {
  /**
   * @generated from protobuf field: label.UpdateI_Filter filter = 1;
   */
  filter?: UpdateI_Filter;
  /**
   * @generated from protobuf field: repeated label.UpdateI_Object object = 2;
   */
  object: UpdateI_Object[];
}
/**
 * @generated from protobuf message label.UpdateI_Filter
 */
export interface UpdateI_Filter {}
/**
 * @generated from protobuf message label.UpdateI_Object
 */
export interface UpdateI_Object {
  /**
   * @generated from protobuf field: map<string, string> intern = 1;
   */
  intern: {
    [key: string]: string;
  };
  /**
   * @generated from protobuf field: repeated label.UpdateI_Object_Update update = 2;
   */
  update: UpdateI_Object_Update[];
}
/**
 * @generated from protobuf message label.UpdateI_Object_Update
 */
export interface UpdateI_Object_Update {
  /**
   * @generated from protobuf field: string ope = 1;
   */
  ope: string;
  /**
   * @generated from protobuf field: string pat = 2;
   */
  pat: string;
  /**
   * @generated from protobuf field: optional string val = 3;
   */
  val?: string;
}
/**
 * UpdateO is the output for updating labels.
 *
 *     {
 *         "object": [
 *             {
 *                 "intern": {
 *                     "label.naonao.online/status": "updated"
 *                 }
 *             }
 *         ]
 *     }
 *
 *
 * @generated from protobuf message label.UpdateO
 */
export interface UpdateO {
  /**
   * @generated from protobuf field: label.UpdateO_Filter filter = 1;
   */
  filter?: UpdateO_Filter;
  /**
   * @generated from protobuf field: repeated label.UpdateO_Object object = 2;
   */
  object: UpdateO_Object[];
}
/**
 * @generated from protobuf message label.UpdateO_Filter
 */
export interface UpdateO_Filter {}
/**
 * @generated from protobuf message label.UpdateO_Object
 */
export interface UpdateO_Object {
  /**
   * @generated from protobuf field: map<string, string> intern = 1;
   */
  intern: {
    [key: string]: string;
  };
  /**
   * @generated from protobuf field: label.UpdateO_Object_Public public = 2;
   */
  public?: UpdateO_Object_Public;
}
/**
 * @generated from protobuf message label.UpdateO_Object_Public
 */
export interface UpdateO_Object_Public {}
// @generated message type with reflection information, may provide speed optimized methods
class UpdateI$Type extends MessageType<UpdateI> {
  constructor() {
    super("label.UpdateI", [
      { no: 1, name: "filter", kind: "message", T: () => UpdateI_Filter },
      {
        no: 2,
        name: "object",
        kind: "message",
        repeat: 1 /*RepeatType.PACKED*/,
        T: () => UpdateI_Object,
      },
    ]);
  }
  create(value?: PartialMessage<UpdateI>): UpdateI {
    const message = { object: [] };
    globalThis.Object.defineProperty(message, MESSAGE_TYPE, {
      enumerable: false,
      value: this,
    });
    if (value !== undefined)
      reflectionMergePartial<UpdateI>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: UpdateI,
  ): UpdateI {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* label.UpdateI_Filter filter */ 1:
          message.filter = UpdateI_Filter.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.filter,
          );
          break;
        case /* repeated label.UpdateI_Object object */ 2:
          message.object.push(
            UpdateI_Object.internalBinaryRead(reader, reader.uint32(), options),
          );
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: UpdateI,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* label.UpdateI_Filter filter = 1; */
    if (message.filter)
      UpdateI_Filter.internalBinaryWrite(
        message.filter,
        writer.tag(1, WireType.LengthDelimited).fork(),
        options,
      ).join();
    /* repeated label.UpdateI_Object object = 2; */
    for (let i = 0; i < message.object.length; i++)
      UpdateI_Object.internalBinaryWrite(
        message.object[i],
        writer.tag(2, WireType.LengthDelimited).fork(),
        options,
      ).join();
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message label.UpdateI
 */
export const UpdateI = new UpdateI$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateI_Filter$Type extends MessageType<UpdateI_Filter> {
  constructor() {
    super("label.UpdateI_Filter", []);
  }
  create(value?: PartialMessage<UpdateI_Filter>): UpdateI_Filter {
    const message = {};
    globalThis.Object.defineProperty(message, MESSAGE_TYPE, {
      enumerable: false,
      value: this,
    });
    if (value !== undefined)
      reflectionMergePartial<UpdateI_Filter>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: UpdateI_Filter,
  ): UpdateI_Filter {
    return target ?? this.create();
  }
  internalBinaryWrite(
    message: UpdateI_Filter,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message label.UpdateI_Filter
 */
export const UpdateI_Filter = new UpdateI_Filter$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateI_Object$Type extends MessageType<UpdateI_Object> {
  constructor() {
    super("label.UpdateI_Object", [
      {
        no: 1,
        name: "intern",
        kind: "map",
        K: 9 /*ScalarType.STRING*/,
        V: { kind: "scalar", T: 9 /*ScalarType.STRING*/ },
      },
      {
        no: 2,
        name: "update",
        kind: "message",
        repeat: 1 /*RepeatType.PACKED*/,
        T: () => UpdateI_Object_Update,
      },
    ]);
  }
  create(value?: PartialMessage<UpdateI_Object>): UpdateI_Object {
    const message = { intern: {}, update: [] };
    globalThis.Object.defineProperty(message, MESSAGE_TYPE, {
      enumerable: false,
      value: this,
    });
    if (value !== undefined)
      reflectionMergePartial<UpdateI_Object>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: UpdateI_Object,
  ): UpdateI_Object {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* map<string, string> intern */ 1:
          this.binaryReadMap1(message.intern, reader, options);
          break;
        case /* repeated label.UpdateI_Object_Update update */ 2:
          message.update.push(
            UpdateI_Object_Update.internalBinaryRead(
              reader,
              reader.uint32(),
              options,
            ),
          );
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  private binaryReadMap1(
    map: UpdateI_Object["intern"],
    reader: IBinaryReader,
    options: BinaryReadOptions,
  ): void {
    let len = reader.uint32(),
      end = reader.pos + len,
      key: keyof UpdateI_Object["intern"] | undefined,
      val: UpdateI_Object["intern"][any] | undefined;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case 1:
          key = reader.string();
          break;
        case 2:
          val = reader.string();
          break;
        default:
          throw new globalThis.Error(
            "unknown map entry field for field label.UpdateI_Object.intern",
          );
      }
    }
    map[key ?? ""] = val ?? "";
  }
  internalBinaryWrite(
    message: UpdateI_Object,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* map<string, string> intern = 1; */
    for (let k of Object.keys(message.intern))
      writer
        .tag(1, WireType.LengthDelimited)
        .fork()
        .tag(1, WireType.LengthDelimited)
        .string(k)
        .tag(2, WireType.LengthDelimited)
        .string(message.intern[k])
        .join();
    /* repeated label.UpdateI_Object_Update update = 2; */
    for (let i = 0; i < message.update.length; i++)
      UpdateI_Object_Update.internalBinaryWrite(
        message.update[i],
        writer.tag(2, WireType.LengthDelimited).fork(),
        options,
      ).join();
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message label.UpdateI_Object
 */
export const UpdateI_Object = new UpdateI_Object$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateI_Object_Update$Type extends MessageType<UpdateI_Object_Update> {
  constructor() {
    super("label.UpdateI_Object_Update", [
      { no: 1, name: "ope", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
      { no: 2, name: "pat", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
      {
        no: 3,
        name: "val",
        kind: "scalar",
        opt: true,
        T: 9 /*ScalarType.STRING*/,
      },
    ]);
  }
  create(value?: PartialMessage<UpdateI_Object_Update>): UpdateI_Object_Update {
    const message = { ope: "", pat: "" };
    globalThis.Object.defineProperty(message, MESSAGE_TYPE, {
      enumerable: false,
      value: this,
    });
    if (value !== undefined)
      reflectionMergePartial<UpdateI_Object_Update>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: UpdateI_Object_Update,
  ): UpdateI_Object_Update {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* string ope */ 1:
          message.ope = reader.string();
          break;
        case /* string pat */ 2:
          message.pat = reader.string();
          break;
        case /* optional string val */ 3:
          message.val = reader.string();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: UpdateI_Object_Update,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* string ope = 1; */
    if (message.ope !== "")
      writer.tag(1, WireType.LengthDelimited).string(message.ope);
    /* string pat = 2; */
    if (message.pat !== "")
      writer.tag(2, WireType.LengthDelimited).string(message.pat);
    /* optional string val = 3; */
    if (message.val !== undefined)
      writer.tag(3, WireType.LengthDelimited).string(message.val);
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message label.UpdateI_Object_Update
 */
export const UpdateI_Object_Update = new UpdateI_Object_Update$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateO$Type extends MessageType<UpdateO> {
  constructor() {
    super("label.UpdateO", [
      { no: 1, name: "filter", kind: "message", T: () => UpdateO_Filter },
      {
        no: 2,
        name: "object",
        kind: "message",
        repeat: 1 /*RepeatType.PACKED*/,
        T: () => UpdateO_Object,
      },
    ]);
  }
  create(value?: PartialMessage<UpdateO>): UpdateO {
    const message = { object: [] };
    globalThis.Object.defineProperty(message, MESSAGE_TYPE, {
      enumerable: false,
      value: this,
    });
    if (value !== undefined)
      reflectionMergePartial<UpdateO>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: UpdateO,
  ): UpdateO {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* label.UpdateO_Filter filter */ 1:
          message.filter = UpdateO_Filter.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.filter,
          );
          break;
        case /* repeated label.UpdateO_Object object */ 2:
          message.object.push(
            UpdateO_Object.internalBinaryRead(reader, reader.uint32(), options),
          );
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: UpdateO,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* label.UpdateO_Filter filter = 1; */
    if (message.filter)
      UpdateO_Filter.internalBinaryWrite(
        message.filter,
        writer.tag(1, WireType.LengthDelimited).fork(),
        options,
      ).join();
    /* repeated label.UpdateO_Object object = 2; */
    for (let i = 0; i < message.object.length; i++)
      UpdateO_Object.internalBinaryWrite(
        message.object[i],
        writer.tag(2, WireType.LengthDelimited).fork(),
        options,
      ).join();
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message label.UpdateO
 */
export const UpdateO = new UpdateO$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateO_Filter$Type extends MessageType<UpdateO_Filter> {
  constructor() {
    super("label.UpdateO_Filter", []);
  }
  create(value?: PartialMessage<UpdateO_Filter>): UpdateO_Filter {
    const message = {};
    globalThis.Object.defineProperty(message, MESSAGE_TYPE, {
      enumerable: false,
      value: this,
    });
    if (value !== undefined)
      reflectionMergePartial<UpdateO_Filter>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: UpdateO_Filter,
  ): UpdateO_Filter {
    return target ?? this.create();
  }
  internalBinaryWrite(
    message: UpdateO_Filter,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message label.UpdateO_Filter
 */
export const UpdateO_Filter = new UpdateO_Filter$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateO_Object$Type extends MessageType<UpdateO_Object> {
  constructor() {
    super("label.UpdateO_Object", [
      {
        no: 1,
        name: "intern",
        kind: "map",
        K: 9 /*ScalarType.STRING*/,
        V: { kind: "scalar", T: 9 /*ScalarType.STRING*/ },
      },
      {
        no: 2,
        name: "public",
        kind: "message",
        T: () => UpdateO_Object_Public,
      },
    ]);
  }
  create(value?: PartialMessage<UpdateO_Object>): UpdateO_Object {
    const message = { intern: {} };
    globalThis.Object.defineProperty(message, MESSAGE_TYPE, {
      enumerable: false,
      value: this,
    });
    if (value !== undefined)
      reflectionMergePartial<UpdateO_Object>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: UpdateO_Object,
  ): UpdateO_Object {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* map<string, string> intern */ 1:
          this.binaryReadMap1(message.intern, reader, options);
          break;
        case /* label.UpdateO_Object_Public public */ 2:
          message.public = UpdateO_Object_Public.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.public,
          );
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  private binaryReadMap1(
    map: UpdateO_Object["intern"],
    reader: IBinaryReader,
    options: BinaryReadOptions,
  ): void {
    let len = reader.uint32(),
      end = reader.pos + len,
      key: keyof UpdateO_Object["intern"] | undefined,
      val: UpdateO_Object["intern"][any] | undefined;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case 1:
          key = reader.string();
          break;
        case 2:
          val = reader.string();
          break;
        default:
          throw new globalThis.Error(
            "unknown map entry field for field label.UpdateO_Object.intern",
          );
      }
    }
    map[key ?? ""] = val ?? "";
  }
  internalBinaryWrite(
    message: UpdateO_Object,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* map<string, string> intern = 1; */
    for (let k of Object.keys(message.intern))
      writer
        .tag(1, WireType.LengthDelimited)
        .fork()
        .tag(1, WireType.LengthDelimited)
        .string(k)
        .tag(2, WireType.LengthDelimited)
        .string(message.intern[k])
        .join();
    /* label.UpdateO_Object_Public public = 2; */
    if (message.public)
      UpdateO_Object_Public.internalBinaryWrite(
        message.public,
        writer.tag(2, WireType.LengthDelimited).fork(),
        options,
      ).join();
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message label.UpdateO_Object
 */
export const UpdateO_Object = new UpdateO_Object$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateO_Object_Public$Type extends MessageType<UpdateO_Object_Public> {
  constructor() {
    super("label.UpdateO_Object_Public", []);
  }
  create(value?: PartialMessage<UpdateO_Object_Public>): UpdateO_Object_Public {
    const message = {};
    globalThis.Object.defineProperty(message, MESSAGE_TYPE, {
      enumerable: false,
      value: this,
    });
    if (value !== undefined)
      reflectionMergePartial<UpdateO_Object_Public>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: UpdateO_Object_Public,
  ): UpdateO_Object_Public {
    return target ?? this.create();
  }
  internalBinaryWrite(
    message: UpdateO_Object_Public,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message label.UpdateO_Object_Public
 */
export const UpdateO_Object_Public = new UpdateO_Object_Public$Type();
